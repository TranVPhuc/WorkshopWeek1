[
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-terraform-install/",
	"title": "Cài đặt Terraform",
	"tags": [],
	"description": "",
	"content": "Cài đặt Terraform Bước 1: Tải xuống Terraform Truy cập trang web chính thức của Terraform https://developer.hashicorp.com/terraform sau đó nhấn vào install, chọn phiên bản phù hợp với hệ điều hành của bạn. Ở Window ta có 2 phiên bản 386 và AMD64, chọn 1 trong 2\nBước 2: Giải nén Terraform Sau khi tải xuống giải nén gói Terraform. Vị trí giải nén tùy thuộc vào bạn. Ở đây ta giải nén vào thư mục C:\\Program Files\\Terraform. Bước 3: Thêm Terraform vào PATH Để sử dụng Terraform từ bất kỳ thư mục nào, bạn cần thêm nó vào PATH của hệ thống.\nỞ phần Search của Window nhập Advanced system settings. Chuyển qua tab Advanced, chọn Enviroment Variables. Chọn Path và nhấn Edit Chọn New và nhập đường dẫn đến thư mục Terraform và nhấn OK/ Kiểm tra cài đặt Terraform thành công chưa bằng cách nhập lệnh terrraform --version trong cmd. Nếu khi nhập lệnh mà hiện ra version của Terraform tức là bạn đã cài đặt Terraform thành công. "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Terraform Terraform là một công cụ mã nguồn mở (open source) được sử dụng để quản lý cơ sở hạ tầng (infrastructure) dưới dạng mã (Infrastructure as Code - IaC). Terraform cho phép bạn định nghĩa và quản lý các tài nguyên cơ sở hạ tầng như máy ảo, mạng, lưu trữ, v.v. trên nhiều nhà cung cấp dịch vụ đám mây (cloud provider) khác nhau như AWS, Azure, Google Cloud Platform (GCP), Alibaba Cloud, v.v.\nLợi ích của việc sử dụng Terraform:\nTự động hóa: Terraform giúp tự động hóa việc triển khai và quản lý cơ sở hạ tầng, giúp tiết kiệm thời gian và giảm thiểu lỗi do thao tác thủ công. Tính nhất quán: Terraform giúp đảm bảo tính nhất quán trong việc triển khai cơ sở hạ tầng trên các môi trường khác nhau. Khả năng tái sử dụng: Terraform cho phép bạn mô-đun hóa cơ sở hạ tầng và tái sử dụng các mô-đun này trong các dự án khác nhau. Khả năng theo dõi: Terraform giúp theo dõi trạng thái (state) của cơ sở hạ tầng, giúp bạn dễ dàng xác định các thay đổi đã được thực hiện. Bây giờ chúng ta sẽ cùng nhau đi qua các khái niệm cơ bản nhất của Terraform. Nội dung Workflow Provider Resource Module State "
},
{
	"uri": "//localhost:1313/vi/3-explantion/3.1-vpc/",
	"title": "Khởi tạo VPC và cấu hình kết nối",
	"tags": [],
	"description": "",
	"content": "Khởi tạo VPC và cấu hình kết nối Khởi tạo VPC: resource \u0026#34;aws_vpc\u0026#34; \u0026#34;prod-vpc\u0026#34; {\rcidr_block = \u0026#34;10.0.0.0/16\u0026#34;\rtags = {\rName = \u0026#34;production\u0026#34;\r}\r} Đoạn code này định nghĩa resource \u0026ldquo;aws_vpc\u0026rdquo; với tên \u0026ldquo;prod-vpc\u0026rdquo;, sử dụng dải địa chỉ 10.0.0.0/16 và được gắn tag \u0026ldquo;Name\u0026rdquo; với giá trị \u0026ldquo;production\u0026rdquo;.\n\u0026ldquo;aws_vpc\u0026rdquo;: Tên loại resource được khai báo. Trong trường hợp này, nó là một Virtual Private Cloud - VPC trong dịch vụ Amazon Web Services -AWS. \u0026ldquo;prod_vpc\u0026rdquo;: Tên của VPC được tạo ra. Bạn có thể đổi tên theo ý muốn. \u0026ldquo;cidr_block\u0026rdquo;: Xác định phạm vi địa chỉ IP cho VPC. Trong project này VPC sẽ sử dụng dải địa chỉ 10.0.0.0.16. \u0026ldquo;tag\u0026rdquo;: Khối này chứa các tag để gắn vào VPC. Giá trị là \u0026ldquo;production\u0026rdquo;. Khởi tạo Internet Gateway resource \u0026#34;aws_internet_gateway\u0026#34; \u0026#34;gw\u0026#34; {\rvpc_id = aws_vpc.prod-vpc.id\r} Đoạn code này định nghĩa resource \u0026ldquo;aws_internet_gateway\u0026rdquo; với tên \u0026ldquo;gw\u0026rdquo;.\n\u0026ldquo;aws_internet_gateway\u0026rdquo;: Đây là tên của loại tài nguyên được khai báo. Trong trường hợp này, nó là một internet gateway trong dịch vụ AWS. \u0026ldquo;gw\u0026rdquo;: Đây là tên của internet gateway được tạo ra. Bạn có thể thay đổi tên này theo ý muốn. \u0026ldquo;vpc_id\u0026rdquo;: Thuộc tính này xác định VPC mà internet gateway sẽ được gắn vào. \u0026ldquo;aws_vpc.prod-vpc.id\u0026rdquo;: Phần này sử dụng tham chiếu để lấy ID của VPC được định nghĩa trước đó với tên \u0026ldquo;prod-vpc\u0026rdquo;. Khởi tạo Route Table resource \u0026#34;aws_route_table\u0026#34; \u0026#34;prod-route-table\u0026#34; {\rvpc_id = aws_vpc.prod-vpc.id\rroute {\rcidr_block = \u0026#34;0.0.0.0/0\u0026#34;\rgateway_id = aws_internet_gateway.gw.id\r}\rroute {\ripv6_cidr_block = \u0026#34;::/0\u0026#34;\rgateway_id = aws_internet_gateway.gw.id\r}\rtags = {\rName = \u0026#34;Prod\u0026#34;\r}\r} \u0026ldquo;aws_route_table\u0026rdquo;: Tên của loại resource được khai báo. Trong trường hợp này, nó là một bảng định tuyến (route table) trong dịch vụ AWS. \u0026ldquo;prod-route-table\u0026rdquo;: Đây là tên của bảng định tuyến được tạo ra. Bạn có thể thay đổi tên này theo ý muốn. \u0026ldquo;vpc_id\u0026rdquo;: Thuộc tính này xác định VPC mà bảng định tuyến sẽ được sử dụng. \u0026ldquo;aws_vpc.prod-vpc.id\u0026rdquo;: Phần này sử dụng tham chiếu để lấy ID của VPC được định nghĩa trước đó với tên \u0026ldquo;prod-vpc\u0026rdquo;. \u0026ldquo;route\u0026rdquo;: Khối này chứa các định tuyến (route) được thêm vào bảng định tuyến. Mỗi khối \u0026ldquo;route\u0026rdquo; định nghĩa cách xử lý lưu lượng truy cập đến một dải địa chỉ IP nhất định. \u0026ldquo;cidr_block\u0026rdquo;: Thuộc tính này xác định phạm vi địa chỉ IP cho VPC. Trong project này, VPC sẽ sử dụng dải địa chỉ \u0026ldquo;10.0.0.0/16\u0026rdquo;. \u0026ldquo;ipv6_cidr_block\u0026rdquo;: Khối định tuyến thứ hai tương tự như khối đầu tiên, nhưng dành cho địa chỉ IPv6. \u0026ldquo;gateway_id = aws_internet_gateway.gw.id\u0026rdquo;: Định tuyến này hướng tất cả lưu lượng truy cập IPv4 đến internet gateway được tham chiếu với tên \u0026ldquo;gw\u0026rdquo;. \u0026ldquo;tags\u0026rdquo;: Khối này chứa các thẻ để gắn vào bảng định tuyến. Thẻ là các cặp key-value giúp bạn tổ chức và quản lý tài nguyên AWS. \u0026ldquo;Name\u0026rdquo;: Đây là tên thẻ được gắn vào bảng định tuyến. Giá trị của nó là \u0026ldquo;Prod\u0026rdquo;. Khởi tạo subnet resource \u0026#34;aws_subnet\u0026#34; \u0026#34;subnet-1\u0026#34; {\rvpc_id = aws_vpc.prod-vpc.id\rcidr_block = \u0026#34;10.0.1.0/24\u0026#34;\ravailability_zone = \u0026#34;us-east-1a\u0026#34;\rtags = {\rName = \u0026#34;prod-subnet\u0026#34;\r}\r} Đoạn code trên tạo ra một subnet mới với tên \u0026ldquo;subnet-1\u0026rdquo; bên trong VPC \u0026ldquo;prod-vpc\u0026rdquo;. Subnet này có dải địa chỉ \u0026ldquo;10.0.1.0/24\u0026rdquo; và nằm trong vùng \u0026ldquo;us-east-1a\u0026rdquo;.\n\u0026ldquo;aws_subnet\u0026rdquo;: Đây là tên của loại tài nguyên được khai báo. Trong trường hợp này, nó là một mạng con (subnet) trong VPC của bạn. \u0026ldquo;subnet-1\u0026rdquo;: Đây là tên của subnet được tạo ra. Bạn có thể thay đổi tên này theo ý muốn. \u0026ldquo;vpc_id\u0026rdquo;: Thuộc tính này xác định VPC mà subnet sẽ thuộc về. \u0026ldquo;aws_vpc.prod-vpc.id\u0026rdquo;: Phần này sử dụng tham chiếu để lấy ID của VPC được định nghĩa trước đó với tên \u0026ldquo;prod-vpc\u0026rdquo;. \u0026ldquo;cidr_block\u0026rdquo;: Thuộc tính này xác định phạm vi địa chỉ IP cho subnet. Trong ví dụ này, subnet sẽ sử dụng dải địa chỉ \u0026ldquo;10.0.1.0/24\u0026rdquo;. \u0026ldquo;availability_zone\u0026rdquo;: Thuộc tính này xác định AZ (availability zone) của subnet. Trong project này, subnet được đặt trong \u0026ldquo;us-east-1a\u0026rdquo;. \u0026ldquo;tags\u0026rdquo;: Khối này chứa các thẻ (tag) để gắn vào subnet. Thẻ là các cặp key-value giúp bạn tổ chức và quản lý tài nguyên AWS. \u0026ldquo;Name = prod-subnet\u0026rdquo;: Đây là tên thẻ được gắn vào subnet. Giá trị của nó là \u0026ldquo;prod-subnet\u0026rdquo;. Liên kết subnet với route table resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;a\u0026#34; {\rsubnet_id = aws_subnet.subnet-1.id\rroute_table_id = aws_route_table.prod-route-table.id\r} Đoạn code này liên kết subnet \u0026ldquo;subnet-1\u0026rdquo; với bảng định tuyến \u0026ldquo;prod-route-table\u0026rdquo;. Bằng cách này, các instance được khởi chạy trong subnet \u0026ldquo;subnet-1\u0026rdquo; sẽ sử dụng các định tuyến được khai báo trong bảng \u0026ldquo;prod-route-table\u0026rdquo; để định tuyến lưu lượng truy cập giữa VPC và internet gateway.\n\u0026ldquo;aws_route_table_association\u0026rdquo;: Đây là tên của loại tài nguyên được khai báo.\n\u0026ldquo;a\u0026rdquo;: Đây là tên của association được tạo ra. Bạn có thể đặt tên khác cho association này.\n\u0026ldquo;subnet_id\u0026rdquo;: Thuộc tính này xác định ID của subnet cần liên kết.\n\u0026ldquo;aws_subnet.subnet-1.id\u0026rdquo;: Phần này sử dụng tham chiếu để lấy ID của subnet được định nghĩa trước đó với tên \u0026ldquo;subnet-1\u0026rdquo;.\n\u0026ldquo;route_table_id\u0026rdquo;: Thuộc tính này xác định ID của bảng định tuyến cần liên kết với subnet.\n\u0026ldquo;aws_route_table.prod-route-table.id\u0026rdquo;: Phần này sử dụng tham chiếu để lấy ID của bảng định tuyến được định nghĩa trước đó với tên \u0026ldquo;prod-route-table\u0026rdquo;.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Tự động hóa việc quản lý cơ sở hạ tầng bằng Terraform",
	"tags": [],
	"description": "",
	"content": "Bắt đầu với Terraform Tổng quan Trong bài viết này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành với Terraform. Tìm hiểu các khái niệm chính, các tính năng của Terraform. Tiến hành cài đặt Terraform và deloy một Web Server trên AWS sử dụng Apache2.\nNội dung Giới thiệu Terraform Các bước chuẩn bị Khởi tạo tài nguyên Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.1-workflow/",
	"title": "Workflow",
	"tags": [],
	"description": "",
	"content": "Terraform Workflow Workflow của Terraform thường bao gồm các bước sau:\nThiết kế: Xác định các tài nguyên cần thiết và mối quan hệ giữa chúng. Xây dựng cấu trúc thư mục và module nếu cần. Khởi tạo: Tải và cài đặt các plugin cần thiết cho dự án. Terraform sẽ tạo ra một thư mục chứa các plugin cần thiết. Lập kế hoạch: Terrraform sẽ so sánh trạng thái hiện tại với trạng thái mong muốn được định nghĩa trong mã hạ tầng và hiện thị những thay đổi dự kiến. Triển khai: Terraform sẽ triển khai các thay đổi đã được lập kế hoạch. Lúc này, Terraform sẽ tạo, cập nhật hoặc xóa các tài nguyên cũng như cập nhật trạng thái. Quản lý trạng thái: Terraform sử dụng một tập tin state để thao dõi trạng thái thực tế của hạ tầng so với mã mô tả. Trong quá trình triển khai, trạng thái này sẽ được cập nhật và lưu trữ một cách an toàn. Kiểm tra: Sau khi triển khai, kiểm tra cấc tài nguyên đã dược triển khai có hoạt động đúng mong đợi không. Giám sát và bảo trì: Sử dụng các công cụ giám sát và bảo trì phù hợp như CloudWatch. Thay đổi: Khi cần thay đổi cấu hình, lặp lại quy trình từ bước thiết kế hoặc chỉnh sửa các tệp cấu hình Terraform. Giải phóng tài nguyên: Khi không cần sử dụng các tài nguyên nữa, Terraform sẽ xóa các tài nguyên được quản lý và cập nhật trạng thái. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị Ở phần này chúng ta sẽ tiến hành cài đặt Terraform và deloy một Web Server sử dụng máy bảo Ubuntu và apache2. Bạn có thẻ tải flie zip project tại đây.\nNội dung Cài đặt Terraform Deloy Web Server "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-deloyws/",
	"title": "Deloy Web Server",
	"tags": [],
	"description": "",
	"content": "Deloy Web Server Để có thể khởi chạy được Project, sau khi tải file Project, giải nén file Project ở bất cứ đâu bạn muốn. Sau đó thay access key và secret key của bạn ở khối provider. Tiếp đến mở file bằng Visual Studio Code và nhấn tổ hợp phím Ctrl + Shift + ` để mở bảng Terminal. Nhập terraform apply sau đó nhập yes ở bảng terminal để xác nhận thay đổi. . Khi bảng Terminal hiển thị Apply completed và hiển thị Server_IP tức là Terraform đã Deloy thành công. Giờ chỉ nhập dãy IP vào một trình duyệt bất kì là ta có thể truy cập vào Web Server của chúng ta. . . "
},
{
	"uri": "//localhost:1313/vi/3-explantion/",
	"title": "Khởi tạo tài nguyên",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị Khởi tạo VPC và cấu hình kết nối Cấu hình Security Group, Network Interface Cấu hình máy chủ "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.2-provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": "Terraform Provider Terraform Provider là một phần mềm đóng vai trò như một cầu nối giữa Terraform và một nền tảng cụ thể, ví dụ như Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform,.. Cho phép Terraform tương tác với các API của nền tảng đã tạo, quản lý và cập nhật tài nguyên. Chức năng chính:\nTao tài nguyên: Nhà cung cấp Terraform cung cấp các hàm và API để tạo các tài nguyên mới trên nền tảng cụ thể. Quản lý tài nguyên: Cho phép Terraform cập nhật, thay đổi cấu hình và xóa các tài nguyên hiện có. Cung cấp trạng thái: Theo dõi trạng thái của các tài nguyên, giúp Terraform xác định những thay đổi cần thực hiện. Ví dụ:\nAWS Provider: Cho phép Terraform tương tác với các dịch vụ AWS như EC2, S3, RDS, v.v. Azure Provider: Cho phép Terraform tương tác với các dịch vụ Azure như VM, Storage, SQL Database, v.v. GCP Provider: Cho phép Terraform tương tác với các dịch vụ GCP như Compute Engine, Cloud Storage, Cloud SQL, v.v. "
},
{
	"uri": "//localhost:1313/vi/3-explantion/3.2-sg-nw/",
	"title": "Security Group và Network Interface",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Security Group và Network Interface Khởi tạo Security Group\nresource \u0026#34;aws_security_group\u0026#34; \u0026#34;allow_web\u0026#34; {\rname = \u0026#34;allow_web_traffic\u0026#34;\rdescription = \u0026#34;Allow Web inbound traffic\u0026#34;\rvpc_id = aws_vpc.prod-vpc.id\ringress {\rdescription = \u0026#34;HTTPS\u0026#34;\rfrom_port = 443\rto_port = 443\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\ringress {\rdescription = \u0026#34;HTTP\u0026#34;\rfrom_port = 80\rto_port = 80\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\ringress {\rdescription = \u0026#34;SSH\u0026#34;\rfrom_port = 22\rto_port = 22\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\regress {\rfrom_port = 0\rto_port = 0\rprotocol = \u0026#34;-1\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\rtags = {\rName = \u0026#34;allow_web\u0026#34;\r}\r} Đoạn code trên tạo ra một security group có tên \u0026ldquo;allow_web\u0026rdquo; cho phép lưu lượng truy cập web (HTTPS và HTTP) và SSH đến các instance được liên kết với security group này. Lưu lượng đi ra của các instance không bị giới hạn.\nĐịnh nghĩa tài nguyên resource \u0026ldquo;aws_security_group\u0026rdquo; \u0026ldquo;allow_web\u0026rdquo; { \u0026hellip; }: Dòng này khai báo một \u0026ldquo;resource\u0026rdquo; thuộc loại aws_security_group. Nó tạo ra một Security Group có tên \u0026ldquo;allow_web\u0026rdquo; trong AWS.\nname = \u0026ldquo;allow_web_traffic\u0026rdquo;: Gán tên cho Security Group.\nThuộc tính của Security Group: description = \u0026ldquo;Allow Web inbound traffic\u0026rdquo;: Cung cấp giải thích ngắn gọn về mục đích của nhóm bảo mật.\nvpc_id = aws_vpc.prod-vpc.id: Chỉ định VPC (Mạng riêng ảo) nơi nhóm bảo mật này sẽ tồn tại. Nó có thể tham chiếu đến một tài nguyên VPC được xác định trước đó có tên \u0026ldquo;prod-vpc\u0026rdquo;.\nInbound Rule: Hai quy tắc đầu tiên (description = \u0026ldquo;HTTPS\u0026rdquo; và description = \u0026ldquo;HTTP\u0026rdquo;) cho phép lưu lượng HTTPS (cổng 443) và HTTP (cổng 80) từ bất kỳ đâu (được chỉ định bởi \u0026ldquo;0.0.0.0/0\u0026rdquo; trong cidr_blocks), về cơ bản là làm cho các cổng này có thể truy cập công khai.\nQuy tắc thứ ba (description = \u0026ldquo;SSH\u0026rdquo;) cũng cho phép lưu lượng SSH (cổng 22) từ bất kỳ đâu, điều này thường không được khuyến nghị cho môi trường sản xuất vì nó cho phép truy cập SSH vào toàn bộ internet. Nên giới hạn truy cập SSH cho các địa chỉ IP hoặc nhóm bảo mật cụ thể để tăng cường bảo mật.\nOutbound Rule: from_port = 0, to_port = 0, protocol = \u0026ldquo;-1\u0026rdquo; và cidr_blocks = [\u0026ldquo;0.0.0.0/0\u0026rdquo;] cho phép tất cả lưu lượng truy cập đi (bất kỳ cổng nào, bất kỳ giao thức nào) đến bất kỳ đích nào (toàn bộ internet). Tag: tags = { Name = \u0026ldquo;allow_web\u0026rdquo; }: Gán thẻ có tên \u0026ldquo;Name\u0026rdquo; với giá trị \u0026ldquo;allow_web\u0026rdquo; cho nhóm bảo mật để dễ dàng tổ chức và xác định. Khởi tạo NetWork Interface\nresource \u0026#34;aws_network_interface\u0026#34; \u0026#34;web-server-nic\u0026#34; {\rsubnet_id = aws_subnet.subnet-1.id\rprivate_ips = [\u0026#34;10.0.1.50\u0026#34;]\rsecurity_groups = [aws_security_group.allow_web.id]\r} Định nghĩa tài nguyên resource \u0026ldquo;aws_network_interface\u0026rdquo; \u0026ldquo;web-server-nic\u0026rdquo; { \u0026hellip; }: Dòng này khai báo một tài nguyên thuộc loại aws_network_interface trong mã cơ sở hạ tầng của bạn. Nó tạo ra một Network Interface (ENI) trong AWS. Cấu hình Network Interface subnet_id = aws_subnet.subnet-1.id: Dòng này chỉ định lớp mạng con nơi Network Interface sẽ được tạo. Nó có thể tham chiếu đến một resource \u0026ldquo;subnet\u0026rdquo; được xác định trước đó có tên \u0026ldquo;subnet-1\u0026rdquo;.\nprivate_ips = [\u0026ldquo;10.0.1.50\u0026rdquo;]: Dòng này gán một địa chỉ IP \u0026ldquo;10.0.1.50\u0026rdquo; cho Network Interface. Các Instance cần có IP riêng để giao tiếp trong VPC.\nsecurity_groups = [aws_security_group.allow_web.id]: Dòng này liên kết Security Group có tên \u0026ldquo;allow_web\u0026rdquo; với Network Interface. Security Group xác định các Inbound Rule và Outboud Rule sẽ được áp dụng cho các instance sử dụng Network Interface này.\nGán Elastic IP vào Network Interface\nresource \u0026#34;aws_eip\u0026#34; \u0026#34;one\u0026#34; {\rdomain = \u0026#34;vpc\u0026#34;\rnetwork_interface = aws_network_interface.web-server-nic.id\rassociate_with_private_ip = \u0026#34;10.0.1.50\u0026#34;\rdepends_on = [ aws_internet_gateway.gw,aws_instance.web-server-instance ]\r}\routput \u0026#34;server_public_ip\u0026#34; {\rvalue = aws_eip.one.public_ip\r} Mã Terraform này tạo ra một EIP trong VPC của bạn, liên kết nó với một Network Interface và private cụ thể, sau đó xuất ra địa chỉ Public IP có thể được sử dụng để truy cập máy chủ web từ internet.\nĐịnh nghĩa tài nguyên domain: Được đặt thành \u0026ldquo;vpc\u0026rdquo;, cho biết EIP dành cho môi trường VPC. network_interface: Thấm chiếm ID của Network Interface hiện có (aws_network_interface.web-server-nic.id). EIP sẽ được liên kết với Network Interface này. associate_with_private_ip: Chỉ định private IP (10.0.1.50) trong VPC mà EIP sẽ liên kết đến. depends_on: Đảm bảo rằng EIP (aws_eip.one) chỉ được tạo sau khi Internet Gateway (aws_internet_gateway.gw) và Instance (aws_instance.web-server-instance) được tạo. Định nghĩa output value: Tham chiếu thuộc tính public_ip của tài nguyên aws_eip.one. Thuộc tính này sẽ ghi lại địa chỉ IP công khai được gán cho EIP và hiển thị ở Terminal. "
},
{
	"uri": "//localhost:1313/vi/3-explantion/3.3-ec2/",
	"title": "Cấu hình EC2",
	"tags": [],
	"description": "",
	"content": "Cấu hình EC2 Instance resource \u0026#34;aws_instance\u0026#34; \u0026#34;web-server-instance\u0026#34; {\rami = \u0026#34;ami-085925f297f89fce1\u0026#34;\rinstance_type = \u0026#34;t2.micro\u0026#34;\ravailability_zone = \u0026#34;us-east-1a\u0026#34;\rkey_name = \u0026#34;web-server-key\u0026#34;\rnetwork_interface {\rdevice_index = 0\rnetwork_interface_id = aws_network_interface.web-server-nic.id\r}\ruser_data = \u0026lt;\u0026lt;-EOF\r#!/bin/bash\rsudo apt update -y\rsudo apt install apache2 -y\rsudo systemctl start apache2\rsudo bash -c \u0026#39;echo your very first web server \u0026gt; /var/www/html/index.html\u0026#39;\rEOF\rtags = {\rName = \u0026#34;web-server\u0026#34;\r}\r} Đoạn mã Terraform này tạo ra một máy chủ web trên AWS EC2 với thiết lập máy chủ web Apache cơ bản. Bằng cách chạy cấu hình này, Terraform sẽ cung cấp tài nguyên và khởi chạy máy chủ với cấu hình được chỉ định.\nĐịnh nghĩa tài nguyên resource \u0026ldquo;aws_instance\u0026rdquo; \u0026ldquo;web-server-instance\u0026rdquo;: Dòng này định nghĩa một tài nguyên thuộc loại aws_instance và gán cho nó tên web-server-instance. Tên này sẽ được sử dụng để tham khảo đến máy chủ cụ thể này trong cấu hình Terraform của bạn. Cấu hình máy chủ ami = \u0026ldquo;ami-085925f297f89fce1\u0026rdquo;: Dòng này chỉ định Amazon Machine Image (AMI) để sử dụng cho việc khởi chạy máy chủ. Bạn có thể tìm thấy các AMI khác nhau trong AWS Marketplace hoặc tạo AMI tùy chỉnh của riêng bạn. instance_type = \u0026ldquo;t2.micro\u0026rdquo;: Dòng này xác định loại máy chủ sẽ được khởi chạy. Trong trường hợp này, nó là t2.micro. availability_zone = \u0026ldquo;us-east-1a\u0026rdquo;: Dòng này chỉ định Availability Zone (AZ) nơi máy chủ sẽ được khởi chạy. Cấu hình mạng network_interface { \u0026hellip; }: Khối này định nghĩa giao diện mạng cho máy chủ. Terraform dường như đang tham chiếu đến một tài nguyên Network Interface hiện có tên aws_network_interface.web-server-nic\nUser Data:\nuser_data = \u0026laquo;-EOF \u0026hellip; EOF: Định nghĩa một tập lệnh sẽ được thực thi trên máy chủ trong lần khởi động đầu tiên. Tệp lệnh sử dụng #!/bin/bash để thực hiện các hành động sau: sudo apt update -y: Cập nhật danh sách gói cho trình quản lý gói.\nsudo apt install apache2 -y: Cài đặt phần mềm máy chủ web Apache.\nsudo systemctl start apache2: Khởi động dịch vụ máy chủ web Apache.\nsudo bash -c \u0026rsquo;echo your very first web server \u0026gt; /var/www/html/index.html\u0026rsquo;: Tạo một tệp index.html đơn giản với văn bản \u0026ldquo;your very first web server\u0026rdquo; trong thư mục gốc tài liệu của máy chủ web (/var/www/html).\nTag: tags = { Name = \u0026ldquo;web-server\u0026rdquo; }: Dòng này gán một thẻ tên \u0026ldquo;Name\u0026rdquo; với giá trị \u0026ldquo;web-server\u0026rdquo; cho máy chủ. "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.3-resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": "Terraform Resource Trong terraform, resource (tài nguyên) là các thành phần cơ bản cấu tạo nên cơ sở hạ tầng mà bạn quản lý với Terraform. Nó có thể bao gồm nhiều lại tài nguyên khác nhau, tùy thuộc vào nhà cung cấp dịch vụ đám mấy (cloud provider) mà bạn sử dụng. Chúng có thể bao gồm các loại tài nguyên sau:\nMáy ảo: EC2 instance trên AWS, Azure VM, Google Compute Engine Mạng: Bao gồm VPC, subnet, load balancer, firewall. Lưu trữ: S3 bucket trên AWS, Azure Blob Storage, Google Cloud Storage. Các dịch vụ khác: CloudWatch trên AWS, Azure Monitor, Google, Cloud Monitoring. Đặc điểm của Terraform resource:\nĐược định nghĩa bằng mã: Sử dụng ngôn ngữ HashiCorp Configuration Language (HCL) để mô tả cấu hình mong muốn của tài nguyên. Quản lý vòng đời: Terraform có thể tạo, cập nhật và xóa tài nguyên một cách tự động. Tính linh hoạt: Hỗ trợ nhiều nhà cung cấp dịch vụ đám mây (cloud provider) và có thể được sử dụng để quản lý cơ sở hạ tầng on-premises. Dễ sử dụng: Cung cấp cú pháp đơn giản và dễ hiểu, giúp bạn dễ dàng bắt đầu sử dụng. Cú pháp sử dụng:\nprovider \u0026#34;aws\u0026#34; {\rregion = \u0026#34;us-east-1\u0026#34;\r}\rresource \u0026#34;aws_instance\u0026#34; \u0026#34;example\u0026#34; {\rami = \u0026#34;ami-0c55b159cbfafe1f0\u0026#34; instance_type = \u0026#34;t2.micro\u0026#34; } Trong ví dụ này:\nprovider \u0026ldquo;aws\u0026rdquo; xác định chúng ta sẽ sử dụng AWS làm nhà cung cấp dịch vụ. resource \u0026ldquo;aws_instance\u0026rdquo; \u0026ldquo;example\u0026rdquo; định nghĩa một tài nguyên EC2 với tên là \u0026ldquo;example\u0026rdquo; ami: Chọn một AmazonMachine Image (AMI) để tạo instance. instance_type: Chọn loại instance, ở đây là t2.micro. Có nhiều nhà cung cấp dịch vụ đám mây (cloud provider) hỗ trợ Terraform. Hãy đảm bảo rằng bạn chọn đúng nhà cung cấp cho nhu cầu của mình.\n"
},
{
	"uri": "//localhost:1313/vi/4-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Để dọn dẹp tài nguyên ở bảng Terminal của Visual studio code, nhập terraform destroy, tiếp đến nhập yes để xác nhận. "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.4-module/",
	"title": "Module",
	"tags": [],
	"description": "",
	"content": "Terraform Module Terraform Module là một tính năng cho phép bạn chia mã Terraform thành các phần nhỏ, dễ quản lý hơn. Nó tương tự như các hàm hoặc các lớp trong lập trình, giúp tái sử dụng code và tổ chức cấu trúc hạ tầng một cách hiệu quả.\nLợi ích của việc sử dụng Terraform Module:\nTái sử dụng mã: Bạn có thể tạo các mô-đun cho các thành phần cơ sở hạ tầng phổ biến, chẳng hạn như máy chủ ảo, mạng hoặc cơ sở dữ liệu, và sử dụng lại chúng trong nhiều dự án khác nhau. Khả năng bảo trì: Chia mã thành các mô-đun nhỏ giúp bạn dễ dàng tìm kiếm, sửa lỗi và cập nhật mã hơn. Tính cộng tác: Bạn có thể chia sẻ các mô-đun với các thành viên khác trong nhóm của mình để cùng nhau phát triển và quản lý cơ sở hạ tầng. *Ví dụ về module Terraform module \u0026#34;aws_ec2_instance\u0026#34; {\rsource = \u0026#34;hashicorp/aws/modules/ec2-instance\u0026#34;\rname = \u0026#34;my-instance\u0026#34;\rami = \u0026#34;ami-01234567890abcdef0\u0026#34;\rinstance_type = \u0026#34;t2.micro\u0026#34;\rcount = 2\r} Mô-đun này có thể được sử dụng trong bất kỳ dự án Terraform nào để tạo ra một máy chủ ảo AWS EC2.\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.5-state/",
	"title": "Terraform State",
	"tags": [],
	"description": "",
	"content": "Terraform State Terraform State là một tập dữ liệu lưu trữ thông tin về các tài nguyên cơ sở hạ tầng mà Terraform đã quản lý. Bao gồm:\nTên và loại mỗi tài nguyên. Thuộc tính mỗi tài nguyên. Mối quan hệ giữa các tài nguyên. Mục đích:\nTheo dõi các thay đổi đối với cơ sở hậ tầng. Xác định các tài nguyên cần được tạo, cập nhật hoặc xóa. Giữ cho cơ sở hạ tầng của bạn nhất quán với cấu hình Terraform. Các loại Terraform State:\nTrạng thái cục bộ: được lưu trữ trong tệp .tfstate trong thư mục dự án Terraform của bạn. Trạng thái xa: được lưu trữ trong kho lưu trữ từ xa, chẳng hạn như HashiCorp Vault. Ví dụ về thông tin của một máy ảo AWS sau khi được tạo:\n{\r\u0026#34;resources\u0026#34;: {\r\u0026#34;aws_instance.web_server\u0026#34;: {\r\u0026#34;type\u0026#34;: \u0026#34;aws_instance\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;web_server\u0026#34;,\r\u0026#34;count\u0026#34;: 1,\r\u0026#34;primary\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;i-1234567890abcdef0\u0026#34;,\r\u0026#34;attributes\u0026#34;: {\r\u0026#34;ami_id\u0026#34;: \u0026#34;ami-1234567890abcdef0\u0026#34;,\r\u0026#34;instance_type\u0026#34;: \u0026#34;t2.micro\u0026#34;,\r\u0026#34;public_ip\u0026#34;: \u0026#34;123.45.67.89\u0026#34;\r}\r}\r}\r}\r} Có một số công cụ Terraform có thể giúp bạn quản lý trạng thái Terraform, chẳng hạn như Terraform State Viewer và Terraform State Diff.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]