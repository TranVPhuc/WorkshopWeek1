[
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-terraform-install/",
	"title": "Cài đặt Terraform",
	"tags": [],
	"description": "",
	"content": "Cài đặt Terraform Bước 1: Tải xuống Terraform Truy cập trang web chính thức của Terraform https://developer.hashicorp.com/terraform sau đó nhấn vào install, chọn phiên bản phù hợp với hệ điều hành của bạn. Ở Window ta có 2 phiên bản 386 và AMD64, chọn 1 trong 2\nBước 2: Giải nén Terraform Sau khi tải xuống giải nén gói Terraform. Vị trí giải nén tùy thuộc vào bạn. Ở đây ta giải nén vào thư mục C:\\Program Files\\Terraform. Bước 3: Thêm Terraform vào PATH Để sử dụng Terraform từ bất kỳ thư mục nào, bạn cần thêm nó vào PATH của hệ thống.\nỞ phần Search của Window nhập Advanced system settings. Chuyển qua tab Advanced, chọn Enviroment Variables. Chọn Path và nhấn Edit Chọn New và nhập đường dẫn đến thư mục Terraform và nhấn OK/ Kiểm tra cài đặt Terraform thành công chưa bằng cách nhập lệnh terrraform --version trong cmd. Nếu khi nhập lệnh mà hiện ra version của Terraform tức là bạn đã cài đặt Terraform thành công. "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Terraform Terraform là một công cụ mã nguồn mở (open source) được sử dụng để quản lý cơ sở hạ tầng (infrastructure) dưới dạng mã (Infrastructure as Code - IaC). Terraform cho phép bạn định nghĩa và quản lý các tài nguyên cơ sở hạ tầng như máy ảo, mạng, lưu trữ, v.v. trên nhiều nhà cung cấp dịch vụ đám mây (cloud provider) khác nhau như AWS, Azure, Google Cloud Platform (GCP), Alibaba Cloud, v.v.\nLợi ích của việc sử dụng Terraform:\nTự động hóa: Terraform giúp tự động hóa việc triển khai và quản lý cơ sở hạ tầng, giúp tiết kiệm thời gian và giảm thiểu lỗi do thao tác thủ công. Tính nhất quán: Terraform giúp đảm bảo tính nhất quán trong việc triển khai cơ sở hạ tầng trên các môi trường khác nhau. Khả năng tái sử dụng: Terraform cho phép bạn mô-đun hóa cơ sở hạ tầng và tái sử dụng các mô-đun này trong các dự án khác nhau. Khả năng theo dõi: Terraform giúp theo dõi trạng thái (state) của cơ sở hạ tầng, giúp bạn dễ dàng xác định các thay đổi đã được thực hiện. Bây giờ chúng ta sẽ cùng nhau đi qua các khái niệm cơ bản nhất của Terraform. Nội dung Workflow Provider Resource Module State "
},
{
	"uri": "//localhost:1313/vi/3-explantion/3.1-provider/",
	"title": "Thiết lập kết nối đến tài khoản AWS",
	"tags": [],
	"description": "",
	"content": "Thiết lập kết nối đến tài khoản AWS provider \u0026#34;aws\u0026#34; {\rregion = \u0026#34;us-east-1\u0026#34;\rshared_config_files = [\u0026#34;~/.aws/config\u0026#34;]\rshared_credentials_files = [\u0026#34;~/.aws/credentials\u0026#34;]\rprofile = \u0026#34;terraform\u0026#34;\r} Đoạn mã trên là một phần cấu hình của Terraform để sử dụng dịch vụ AWS (Amazon Web Services).\nprovider \u0026ldquo;aws\u0026rdquo;: Đây là khai báo một provider cho Terraform, cụ thể là AWS. region = \u0026ldquo;us-east-1\u0026rdquo;: Đây là cấu hình cho khu vực (region) mà các tài nguyên sẽ được tạo ra. Trong trường hợp này, khu vực được chọn là \u0026ldquo;us-east-1\u0026rdquo;. shared_config_files = [\u0026quot;~/.aws/config\u0026quot;]: Đây là đường dẫn tới tệp cấu hình chung (shared configuration files) của AWS. Trong trường hợp này, tệp cấu hình được sử dụng là \u0026ldquo;~/.aws/config\u0026rdquo;. shared_credentials_files = [\u0026quot;~/.aws/credentials\u0026quot;]: Đây là đường dẫn tới tệp chứa thông tin xác thực chung (shared credentials files) của AWS. Trong trường hợp này, tệp chứa thông tin xác thực được sử dụng là \u0026ldquo;~/.aws/credentials\u0026rdquo;. profile = \u0026ldquo;terraform\u0026rdquo;: Đây là tên của profile (hồ sơ) trong tệp cấu hình và tệp chứa thông tin xác thực. Trong trường hợp này, tên profile được sử dụng là \u0026ldquo;terraform\u0026rdquo;. "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Tự động hóa việc quản lý cơ sở hạ tầng bằng Terraform",
	"tags": [],
	"description": "",
	"content": "Bắt đầu với Terraform Tổng quan Trong bài viết này, bạn sẽ tìm hiểu các khái niệm cơ bản và thực hành với Terraform. Tìm hiểu các khái niệm chính, các tính năng của Terraform. Tiến hành cài đặt Terraform và deloy một Web Server trên AWS sử dụng Apache2.\nNội dung Giới thiệu Terraform Các bước chuẩn bị Khởi tạo tài nguyên Deloy Web Server Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.1-workflow/",
	"title": "Workflow",
	"tags": [],
	"description": "",
	"content": "Terraform Workflow Workflow của Terraform thường bao gồm các bước sau:\nThiết kế: Xác định các tài nguyên cần thiết và mối quan hệ giữa chúng. Xây dựng cấu trúc thư mục và module nếu cần. Khởi tạo: Tải và cài đặt các plugin cần thiết cho dự án. Terraform sẽ tạo ra một thư mục chứa các plugin cần thiết. Lập kế hoạch: Terrraform sẽ so sánh trạng thái hiện tại với trạng thái mong muốn được định nghĩa trong mã hạ tầng và hiện thị những thay đổi dự kiến. Triển khai: Terraform sẽ triển khai các thay đổi đã được lập kế hoạch. Lúc này, Terraform sẽ tạo, cập nhật hoặc xóa các tài nguyên cũng như cập nhật trạng thái. Quản lý trạng thái: Terraform sử dụng một tập tin state để thao dõi trạng thái thực tế của hạ tầng so với mã mô tả. Trong quá trình triển khai, trạng thái này sẽ được cập nhật và lưu trữ một cách an toàn. Kiểm tra: Sau khi triển khai, kiểm tra cấc tài nguyên đã dược triển khai có hoạt động đúng mong đợi không. Giám sát và bảo trì: Sử dụng các công cụ giám sát và bảo trì phù hợp như CloudWatch. Thay đổi: Khi cần thay đổi cấu hình, lặp lại quy trình từ bước thiết kế hoặc chỉnh sửa các tệp cấu hình Terraform. Giải phóng tài nguyên: Khi không cần sử dụng các tài nguyên nữa, Terraform sẽ xóa các tài nguyên được quản lý và cập nhật trạng thái. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị Ở phần này chúng ta sẽ tiến hành cài đặt Terraform và deloy một Web Server sử dụng máy ảo Ubuntu và apache2. Bạn có thẻ tải flie zip project tại đây.\nNội dung Cài đặt Terraform Cấu trúc Web Server Cài đặt AWS CLI Profile "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-ws-structure/",
	"title": "Cấu trúc Web Server",
	"tags": [],
	"description": "",
	"content": "Cấu trúc Web Server Cấu trúc của một web server có thể được phân thành các thành phần cơ bản sau:\nPhần cứng máy chủ (Server Hardware): Máy chủ: Một máy tính chạy liên tục để chạy các dịch vụ web. Kết nối mạng: Để kết nối với internet hoặc mạng nội bộ.** Phần mềm máy chủ (Server Software): Hệ điều hành: Thường là các biến thể của Linux (như Ubuntu, CentOS) hoặc Windows Server. Web server software: Phần mềm chạy trên máy chủ để xử lý các yêu cầu HTTP. Apache, Nginx, Microsoft IIS là các ví dụ phổ biến. Ứng dụng và dữ liêu: Ứng dụng web: Mã nguồn của trang web hoặc ứng dụng web, thường được viết bằng các ngôn ngữ như HTML, CSS, JavaScript, và back-end languages như PHP, Python, Ruby, hoặc Node.js. Dữ liệu: Cơ sở dữ liệu thường được sử dụng để lưu trữ dữ liệu của ứng dụng web, như MySQL, PostgreSQL, MongoDB. Cách hoạt động của 1 Web Server: Tiếp nhận yêu cầu (Request Handling): Web server lắng nghe trên một cổng nhất định (thường là cổng 80 cho HTTP hoặc 443 cho HTTPS). Khi một yêu cầu HTTP được gửi đến, web server tiếp nhận yêu cầu này qua giao thức TCP/IP. Xử lý yêu cầu (Request Processing): Web server xác định loại yêu cầu (GET, POST, PUT, DELETE) và phân tích URI (Uniform Resource Identifier). Dựa vào URI và các quy tắc cấu hình, web server quyết định làm gì với yêu cầu (ví dụ: truy cập tệp tin, thực thi mã nguồn, gửi lại trang web đã lưu trữ trước đó). Tạo và gửi phản hồi (Response Generation): Dựa vào loại yêu cầu và nội dung yêu cầu, web server tạo ra một phản hồi HTTP. Phản hồi này có thể là một trang HTML, một tệp tin, hoặc một mã trạng thái (status code). Phản hồi được gửi trở lại cho máy khách thông qua giao thức TCP/IP. Kết thúc kết nối (Connection Closure): Sau khi phản hồi được gửi đi, kết nối TCP/IP có thể được đóng hoặc duy trì để hỗ trợ keep-alive (giữ kết nối mở để giảm độ trễ trong việc thiết lập kết nối mới). Ghi log và theo dõi (Logging and Monitoring): Web server có thể ghi lại thông tin về các yêu cầu đã xử lý và hoạt động của máy chủ để phân tích và theo dõi hiệu suất. "
},
{
	"uri": "//localhost:1313/vi/3-explantion/3.2-vpc/",
	"title": "Khởi tạo VPC và cấu hình kết nối",
	"tags": [],
	"description": "",
	"content": "Khởi tạo VPC và cấu hình kết nối Khởi tạo VPC: resource \u0026#34;aws_vpc\u0026#34; \u0026#34;prod-vpc\u0026#34; {\rcidr_block = \u0026#34;10.0.0.0/16\u0026#34;\rtags = {\rName = \u0026#34;production\u0026#34;\r}\r} Đoạn mã trên được sử dụng để tạo một VPC (Virtual Private Cloud) trên Amazon Web Services (AWS).\nresource \u0026ldquo;aws_vpc\u0026rdquo; \u0026ldquo;prod-vpc\u0026rdquo;: Đây là khai báo một tài nguyên loại aws_vpc, nơi \u0026ldquo;prod-vpc\u0026rdquo; là tên mà bạn gán cho tài nguyên này. Trong Terraform, các tài nguyên có thể được tham chiếu thông qua tên này sau khi được tạo. cidr_block = \u0026ldquo;10.0.0.0/16\u0026rdquo;: Đây là phần quan trọng để định rõ phạm vi mạng của VPC. CIDR block là cách xác định phạm vi các địa chỉ IP mà VPC sẽ sử dụng. Trong trường hợp này, CIDR block là \u0026ldquo;10.0.0.0/16\u0026rdquo;, có nghĩa là VPC sẽ có địa chỉ IP khả dụng bắt đầu từ 10.0.0.0 đến 10.0.255.255. tags = { Name = \u0026ldquo;production\u0026rdquo; }: Đây là phần tags (nhãn) được gán cho tài nguyên. Trong trường hợp này, có một tag duy nhất được gán với key là \u0026ldquo;Name\u0026rdquo; và value là \u0026ldquo;production\u0026rdquo;. Tags có thể được sử dụng để tổ chức và quản lý các tài nguyên trong môi trường AWS. Khởi tạo Internet Gateway resource \u0026#34;aws_internet_gateway\u0026#34; \u0026#34;gw\u0026#34; {\rvpc_id = aws_vpc.prod-vpc.id\r} Đoạn mã này tạo một Internet Gateway (IGW) trên AWS và gắn nó với VPC đã được tạo trước đó trong đoạn mã trước\nresource \u0026ldquo;aws_internet_gateway\u0026rdquo; \u0026ldquo;gw\u0026rdquo;: Đây là khai báo một tài nguyên loại aws_internet_gateway, nơi \u0026ldquo;gw\u0026rdquo; là tên mà bạn gán cho tài nguyên này. Tương tự như trước, bạn có thể tham chiếu tài nguyên này sau khi nó được tạo. vpc_id = aws_vpc.prod-vpc.id: Thuộc tính vpc_id chỉ định VPC mà IGW sẽ được gắn vào. Trong trường hợp này, IGW sẽ được gắn vào VPC có ID được xác định bằng cách tham chiếu đến tài nguyên aws_vpc.prod-vpc và truy cập thuộc tính id của nó. Điều này đảm bảo rằng IGW sẽ được gắn vào VPC đã được tạo trước với tên là \u0026ldquo;prod-vpc\u0026rdquo;. Khởi tạo Route Table resource \u0026#34;aws_route_table\u0026#34; \u0026#34;prod-route-table\u0026#34; {\rvpc_id = aws_vpc.prod-vpc.id\rroute {\rcidr_block = \u0026#34;0.0.0.0/0\u0026#34;\rgateway_id = aws_internet_gateway.gw.id\r}\rroute {\ripv6_cidr_block = \u0026#34;::/0\u0026#34;\rgateway_id = aws_internet_gateway.gw.id\r}\rtags = {\rName = \u0026#34;Prod\u0026#34;\r}\r} Đoạn mã trên tạo một bảng định tuyến (route table) trên AWS và cấu hình các tuyến đường (routes) cho VPC đã được tạo trước đó. Khi mã này được thực thi, nó sẽ tạo ra một bảng định tuyến và cấu hình các tuyến đường cho VPC đã được tạo trước đó, cho phép các tài nguyên trong VPC có thể truy cập Internet.\nresource \u0026ldquo;aws_route_table\u0026rdquo; \u0026ldquo;prod-route-table\u0026rdquo;: Đây là khai báo một tài nguyên loại aws_route_table, nơi \u0026ldquo;prod-route-table\u0026rdquo; là tên mà bạn gán cho tài nguyên này. vpc_id = aws_vpc.prod-vpc.id: Thuộc tính vpc_id xác định VPC mà bảng định tuyến sẽ được áp dụng. Trong trường hợp này, Route Table này được áp dụng cho VPC có ID được xác định bằng cách tham chiếu đến tài nguyên aws_vpc.prod-vpc và truy cập thuộc tính id của nó. route { cidr_block = \u0026ldquo;0.0.0.0/0\u0026rdquo; gateway_id = aws_internet_gateway.gw.id }: Đây là cấu hình tuyến đường cho các địa chỉ IPv4. Tuyến đường này sẽ chuyển hết các gói tin có đích đến là bất kỳ địa chỉ IP nào (CIDR block là \u0026ldquo;0.0.0.0/0\u0026rdquo;) đến Internet Gateway đã được tạo trước đó. Điều này cho phép các tài nguyên trong VPC có thể truy cập Internet. route { ipv6_cidr_block = \u0026ldquo;::/0\u0026rdquo; gateway_id = aws_internet_gateway.gw.id }: Đây là cấu hình tuyến đường cho các địa chỉ IPv6. Tương tự như tuyến đường IPv4, tuyến đường này cũng sẽ chuyển hết các gói tin IPv6 có đích đến là bất kỳ địa chỉ IP nào (CIDR block là \u0026ldquo;::/0\u0026rdquo;) đến Internet Gateway đã được tạo trước đó. tags = { Name = \u0026ldquo;Prod\u0026rdquo; }: Đây là phần tags (nhãn) được gán cho bảng định tuyến. Trong trường hợp này, có một tag duy nhất được gán với key là \u0026ldquo;Name\u0026rdquo; và value là \u0026ldquo;Prod\u0026rdquo;. Khởi tạo subnet resource \u0026#34;aws_subnet\u0026#34; \u0026#34;subnet-1\u0026#34; {\rvpc_id = aws_vpc.prod-vpc.id\rcidr_block = \u0026#34;10.0.1.0/24\u0026#34;\ravailability_zone = \u0026#34;us-east-1a\u0026#34;\rtags = {\rName = \u0026#34;prod-subnet\u0026#34;\r}\r} Đoạn mã trên định nghĩa một subnet trong VPC đã được tạo trước đó. Khi mã này được thực thi, nó sẽ tạo ra một sub**net trong VPC đã được tạo trước đó, với phạm vi địa chỉ IP là \u0026ldquo;10.0.1.0/24\u0026rdquo; và được đặt trong khu vực \u0026ldquo;us-east-1a\u0026rdquo;.\nresource \u0026ldquo;aws_subnet\u0026rdquo; \u0026ldquo;subnet-1\u0026rdquo;: Đây là khai báo một tài nguyên loại aws_subnet, nơi subnet-1 là tên mà bạn gán cho subnet này. vpc_id = aws_vpc.prod-vpc.id: Thuộc tính vpc_id chỉ định ID của VPC mà subnet sẽ thuộc về. Trong trường hợp này, nó đang chỉ định rằng subn**et sẽ thuộc về VPC có ID được xác định bằng cách tham chiếu đến tài nguyên aws_vpc.prod-vpc và truy cập thuộc tính id của nó. cidr_block = \u0026ldquo;10.0.1.0/24\u0026rdquo;: Thuộc tính cidr_block xác định phạm vi địa chỉ IP của subnet. Trong trường hợp này, subnet sẽ có phạm vi từ 10.0.1.0 đến 10.0.1.255, với 256 địa chỉ IP khả dụng. availability_zone = \u0026ldquo;us-east-1a\u0026rdquo;: Thuộc tính availability_zone xác định khu vực mà subnet sẽ được tạo ra. Trong trường hợp này, subnet sẽ được tạo ra trong khu vực \u0026ldquo;us-east-1a\u0026rdquo;. tags = { Name = \u0026ldquo;prod-subnet\u0026rdquo; }: Đây là phần tags (nhãn) được gán cho subnet. Trong trường hợp này, có một tag duy nhất được gán với key là \u0026ldquo;Name\u0026rdquo; và value là \u0026ldquo;prod-subnet\u0026rdquo;. Tags có thể được sử dụng để tổ chức và quản lý các tài nguyên trong môi trường AWS. Liên kết subnet với route table resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;a\u0026#34; {\rsubnet_id = aws_subnet.subnet-1.id\rroute_table_id = aws_route_table.prod-route-table.id\r} Đoạn mã trên định nghĩa một liên kết giữa một subnet và một bảng định tuyến trong môi trường AWS.\nresource \u0026ldquo;aws_route_table_association\u0026rdquo; \u0026ldquo;a\u0026rdquo;: Đây là khai báo một tài nguyên của loại aws_route_table_association, nơi \u0026ldquo;a\u0026rdquo; là tên mà bạn gán cho tài nguyên này.\nsubnet_id = aws_subnet.subnet-1.id: Thuộc tính subnet_id xác định subnet mà liên kết này sẽ áp dụng đến. Trong trường hợp này, nó đang chỉ định rằng liên kết này áp dụng cho subnet có ID được xác định bằng cách tham chiếu đến tài nguyên aws_subnet.subnet-1 và truy cập thuộc tính id của nó.\nroute_table_id = aws_route_table.prod-route-table.id: Thuộc tính route_table_id xác định Route Table mà liên kết này sẽ được áp dụng. Trong trường hợp này, nó đang chỉ định rằng liên kết này sẽ áp dụng cho Route Table có ID được xác định bằng cách tham chiếu đến tài nguyên aws_route_table.prod-route-table và truy cập thuộc tính id của nó.\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.2-provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": "Terraform Provider Terraform Provider là một phần mềm đóng vai trò như một cầu nối giữa Terraform và một nền tảng cụ thể, ví dụ như Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform,.. Cho phép Terraform tương tác với các API của nền tảng đã tạo, quản lý và cập nhật tài nguyên. Chức năng chính:\nTao tài nguyên: Nhà cung cấp Terraform cung cấp các hàm và API để tạo các tài nguyên mới trên nền tảng cụ thể. Quản lý tài nguyên: Cho phép Terraform cập nhật, thay đổi cấu hình và xóa các tài nguyên hiện có. Cung cấp trạng thái: Theo dõi trạng thái của các tài nguyên, giúp Terraform xác định những thay đổi cần thực hiện. Ví dụ:\nAWS Provider: Cho phép Terraform tương tác với các dịch vụ AWS như EC2, S3, RDS, v.v. Azure Provider: Cho phép Terraform tương tác với các dịch vụ Azure như VM, Storage, SQL Database, v.v. GCP Provider: Cho phép Terraform tương tác với các dịch vụ GCP như Compute Engine, Cloud Storage, Cloud SQL, v.v. "
},
{
	"uri": "//localhost:1313/vi/3-explantion/",
	"title": "Khởi tạo tài nguyên",
	"tags": [],
	"description": "",
	"content": "Khởi tạo tài nguyên Ở phần này ta khởi tạo các tài nguyên cần thiết cho project là VPC, Subnet, Route table,..để deloy một Web Server sử dụng máy bảo Ubuntu và apache2.\nContent Khởi tạo kết nối đến tài khoản AWS Khởi tạo VPC và cấu hình kết nối Cấu hình Security Group, Network Interface Cấu hình máy chủ "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.3-resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": "Terraform Resource Trong terraform, resource (tài nguyên) là các thành phần cơ bản cấu tạo nên cơ sở hạ tầng mà bạn quản lý với Terraform. Nó có thể bao gồm nhiều lại tài nguyên khác nhau, tùy thuộc vào nhà cung cấp dịch vụ đám mấy (cloud provider) mà bạn sử dụng. Chúng có thể bao gồm các loại tài nguyên sau:\nMáy ảo: EC2 instance trên AWS, Azure VM, Google Compute Engine Mạng: Bao gồm VPC, subnet, load balancer, firewall. Lưu trữ: S3 bucket trên AWS, Azure Blob Storage, Google Cloud Storage. Các dịch vụ khác: CloudWatch trên AWS, Azure Monitor, Google, Cloud Monitoring. Đặc điểm của Terraform resource:\nĐược định nghĩa bằng mã: Sử dụng ngôn ngữ HashiCorp Configuration Language (HCL) để mô tả cấu hình mong muốn của tài nguyên. Quản lý vòng đời: Terraform có thể tạo, cập nhật và xóa tài nguyên một cách tự động. Tính linh hoạt: Hỗ trợ nhiều nhà cung cấp dịch vụ đám mây (cloud provider) và có thể được sử dụng để quản lý cơ sở hạ tầng on-premises. Dễ sử dụng: Cung cấp cú pháp đơn giản và dễ hiểu, giúp bạn dễ dàng bắt đầu sử dụng. Cú pháp sử dụng:\nprovider \u0026#34;aws\u0026#34; {\rregion = \u0026#34;us-east-1\u0026#34;\r}\rresource \u0026#34;aws_instance\u0026#34; \u0026#34;example\u0026#34; {\rami = \u0026#34;ami-0c55b159cbfafe1f0\u0026#34; instance_type = \u0026#34;t2.micro\u0026#34; } Trong ví dụ này:\nprovider \u0026ldquo;aws\u0026rdquo; xác định chúng ta sẽ sử dụng AWS làm nhà cung cấp dịch vụ. resource \u0026ldquo;aws_instance\u0026rdquo; \u0026ldquo;example\u0026rdquo; định nghĩa một tài nguyên EC2 với tên là \u0026ldquo;example\u0026rdquo; ami: Chọn một AmazonMachine Image (AMI) để tạo instance. instance_type: Chọn loại instance, ở đây là t2.micro. Có nhiều nhà cung cấp dịch vụ đám mây (cloud provider) hỗ trợ Terraform. Hãy đảm bảo rằng bạn chọn đúng nhà cung cấp cho nhu cầu của mình.\n"
},
{
	"uri": "//localhost:1313/vi/3-explantion/3.3-sg-nw/",
	"title": "Security Group và Network Interface",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Security Group và Network Interface Khởi tạo Security Group\nresource \u0026#34;aws_security_group\u0026#34; \u0026#34;allow_web\u0026#34; {\rname = \u0026#34;allow_web_traffic\u0026#34;\rdescription = \u0026#34;Allow Web inbound traffic\u0026#34;\rvpc_id = aws_vpc.prod-vpc.id\ringress {\rdescription = \u0026#34;HTTPS\u0026#34;\rfrom_port = 443\rto_port = 443\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\ringress {\rdescription = \u0026#34;HTTP\u0026#34;\rfrom_port = 80\rto_port = 80\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\ringress {\rdescription = \u0026#34;SSH\u0026#34;\rfrom_port = 22\rto_port = 22\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\regress {\rfrom_port = 0\rto_port = 0\rprotocol = \u0026#34;-1\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\rtags = {\rName = \u0026#34;allow_web\u0026#34;\r}\r} Đoạn mã trên định nghĩa một Security Group trên AWS, cho phép lưu lượng web vào và ra khỏi các máy chủ trong VPC đã được chỉ định.\nresource \u0026ldquo;aws_security_group\u0026rdquo; \u0026ldquo;allow_web\u0026rdquo;: Đây là khai báo một tài nguyên của loại aws_security_group, nơi \u0026ldquo;allow_web\u0026rdquo; là tên mà bạn gán cho nhóm bảo mật này. *** name = \u0026ldquo;allow_web_traffic\u0026rdquo;**: Thuộc tính name xác định tên của nhóm bảo mật. Trong trường hợp này, tên của nhóm bảo mật được đặt là \u0026ldquo;allow_web_traffic\u0026rdquo;. description = \u0026ldquo;Allow Web inbound traffic\u0026rdquo;: Thuộc tính description cung cấp mô tả cho nhóm bảo mật. Trong trường hợp này, mô tả là \u0026ldquo;Allow Web inbound traffic\u0026rdquo; vpc_id = aws_vpc.prod-vpc.id: Thuộc tính vpc_id xác định VPC mà nhóm bảo mật này thuộc về. Trong trường hợp này, nhóm bảo mật sẽ thuộc về VPC có ID được xác định bằng cách tham chiếu đến tài nguyên aws_vpc.prod-vpc và truy cập thuộc tính id của nó. ingress và egress: Các khối này định nghĩa các quy tắc định tuyến (lưu lượng vào và ra) cho nhóm bảo mật. Trong trường hợp này: ingress định nghĩa các quy tắc cho lưu lượng vào. Ba quy tắc đã được định nghĩa ở đây để cho phép lưu lượng HTTPS (port 443), HTTP (port 80) và SSH (port 22) từ bất kỳ địa chỉ IP nào (\u0026ldquo;0.0.0.0/0\u0026rdquo;). egress định nghĩa các quy tắc cho lưu lượng ra. Trong trường hợp này, nó cho phép mọi lưu lượng ra đến bất kỳ địa chỉ IP nào (\u0026ldquo;0.0.0.0/0\u0026rdquo;). tags = { Name = \u0026ldquo;allow_web\u0026rdquo; }: Đây là phần tags (nhãn) được gán cho nhóm bảo mật. Trong trường hợp này, có một tag duy nhất được gán với key là \u0026ldquo;Name\u0026rdquo; và value là \u0026ldquo;allow_web\u0026rdquo;. Tags có thể được sử dụng để tổ chức và quản lý các tài nguyên trong môi trường AWS. Khởi tạo NetWork Interface resource \u0026#34;aws_network_interface\u0026#34; \u0026#34;web-server-nic\u0026#34; {\rsubnet_id = aws_subnet.subnet-1.id\rprivate_ips = [\u0026#34;10.0.1.50\u0026#34;]\rsecurity_groups = [aws_security_group.allow_web.id]\r} Đoạn mã trên định nghĩa một giao diện mạng trên AWS, cụ thể là một NIC (Network Interface Controller) được gắn với một máy chủ web.\nresource \u0026ldquo;aws_network_interface\u0026rdquo; \u0026ldquo;web-server-nic\u0026rdquo;: Đây là khai báo một tài nguyên của loại aws_network_interface, nơi \u0026ldquo;web-server-nic\u0026rdquo; là tên mà bạn gán cho NIC này.\nsubnet_id = aws_subnet.subnet-1.id: Thuộc tính subnet_id xác định subnet mà NIC sẽ được gắn vào. Trong trường hợp này, nó đang chỉ định rằng NIC sẽ được gắn vào subnet có ID được xác định bằng cách tham chiếu đến tài nguyên aws_subnet.subnet-1 và truy cập thuộc tính id của nó.\nprivate_ips = [\u0026ldquo;10.0.1.50\u0026rdquo;]: Thuộc tính private_ips chỉ định địa chỉ IP riêng cho NIC. Trong trường hợp này, NIC sẽ có địa chỉ IP là \u0026ldquo;10.0.1.50\u0026rdquo; trong subnet đã được chỉ định.\nsecurity_groups = [aws_security_group.allow_web.id]: Thuộc tính security_groups xác định các nhóm bảo mật mà NIC sẽ áp dụng. Trong trường hợp này, NIC sẽ áp dụng quy tắc từ nhóm bảo mật có ID được xác định bằng cách tham chiếu đến tài nguyên aws_security_group.allow_web và truy cập thuộc tính id của nó. Điều này đảm bảo rằng NIC sẽ tuân thủ các quy tắc lưu lượng đã được định nghĩa trong nhóm bảo mật này.\nGán Elastic IP vào Network Interface\nresource \u0026#34;aws_eip\u0026#34; \u0026#34;one\u0026#34; {\rdomain = \u0026#34;vpc\u0026#34;\rnetwork_interface = aws_network_interface.web-server-nic.id\rassociate_with_private_ip = \u0026#34;10.0.1.50\u0026#34;\rdepends_on = [ aws_internet_gateway.gw,aws_instance.web-server-instance ]\r}\routput \u0026#34;server_public_ip\u0026#34; {\rvalue = aws_eip.one.public_ip\r} Sau khi áp dụng cấu hình Terraform này, bạn có thể truy xuất địa chỉ IP công cộng liên kết với Elastic IP \u0026ldquo;one\u0026rdquo; bằng cách sử dụng biến đầu ra server_public_ip.\ndomain: Được đặt thành \u0026ldquo;vpc\u0026rdquo;, cho biết EIP dành cho môi trường VPC. network_interface: Thấm chiếm ID của Network Interface hiện có (aws_network_interface.web-server-nic.id). EIP sẽ được liên kết với Network Interface này. associate_with_private_ip: Chỉ định private IP (10.0.1.50) trong VPC mà EIP sẽ liên kết đến. depends_on: Đảm bảo rằng EIP (aws_eip.one) chỉ được tạo sau khi Internet Gateway (aws_internet_gateway.gw) và Instance (aws_instance.web-server-instance) được tạo. value: Tham chiếu thuộc tính public_ip của tài nguyên aws_eip.one. Thuộc tính này sẽ ghi lại địa chỉ IP công khai được gán cho EIP và hiển thị ở Terminal. "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.3-profile/",
	"title": "Thêm Profile AWS bằng AWS CLI",
	"tags": [],
	"description": "",
	"content": "Thêm Profile AWS cho Terraform Cài đặt AWS CLI\nĐảm bảo rằng bạn đã cài đặt Python trên hệ thống của bạn. AWS CLI yêu cầu Python 2 version 2.6.5+ hoặc Python 3 version 3.3+. Truy cập trang Web tải AWS CLI tại đây và tải AWS CLI phù hợp với hệ điều hành của bạn. Ở đây ta dùng Window. Sau khi cài đặt xong bạn có thể kiểm tra AWS CLI đã cài đặt thành công chưa bằng lệnh aws --version Thêm Profile AWS cho Terraform bằng AWS CLI Mở terminal hoặc command prompt. Chạy lệnh aws configure --profile \u0026lt;profile-name\u0026gt; và tuân thủ theo hướng dẫn. Thay \u0026lt;profile-name\u0026gt; bằng tên profile bạn muốn sử dụng cho Terraform. AWS CLI sẽ hỏi bạn về Access Key ID, Secret Access Key, region và định dạng output (ví dụ: JSON). Nhập các giá trị tương ứng và nhấn Enter. Sau khi bạn đã nhập đầy đủ, AWS CLI sẽ tạo một cấu hình mới trong tệp ~/.aws/credentials (trên Linux/macOS) hoặc tệp %USERPROFILE%.aws\\credentials (trên Windows) với tên cấu hình được chỉ định. "
},
{
	"uri": "//localhost:1313/vi/3-explantion/3.4-ec2/",
	"title": "Cấu hình EC2",
	"tags": [],
	"description": "",
	"content": "Cấu hình EC2 Instance resource \u0026#34;aws_instance\u0026#34; \u0026#34;web-server-instance\u0026#34; {\rami = \u0026#34;ami-085925f297f89fce1\u0026#34;\rinstance_type = \u0026#34;t2.micro\u0026#34;\ravailability_zone = \u0026#34;us-east-1a\u0026#34;\rkey_name = \u0026#34;web-server-key\u0026#34;\rnetwork_interface {\rdevice_index = 0\rnetwork_interface_id = aws_network_interface.web-server-nic.id\r}\ruser_data = \u0026lt;\u0026lt;-EOF\r#!/bin/bash\rsudo apt update -y\rsudo apt install apache2 -y\rsudo systemctl start apache2\rsudo bash -c \u0026#39;echo your very first web server \u0026gt; /var/www/html/index.html\u0026#39;\rEOF\rtags = {\rName = \u0026#34;web-server\u0026#34;\r}\r} Đoạn mã sẽ triển khai một máy chủ EC2 trên AWS, cài đặt Apache và tạo một trang web đơn giản, và gắn máy chủ vào Network Interface đã được chỉ định để có thể truy cập từ Internet.\nĐịnh nghĩa tài nguyên resource \u0026ldquo;aws_instance\u0026rdquo; \u0026ldquo;web-server-instance\u0026rdquo;: Dòng này định nghĩa một tài nguyên thuộc loại aws_instance và gán cho nó tên web-server-instance. Tên này sẽ được sử dụng để tham khảo đến máy chủ cụ thể này trong cấu hình Terraform của bạn. Cấu hình máy chủ ami = \u0026ldquo;ami-085925f297f89fce1\u0026rdquo;: Dòng này chỉ định Amazon Machine Image (AMI) để sử dụng cho việc khởi chạy máy chủ. Bạn có thể tìm thấy các AMI khác nhau trong AWS Marketplace hoặc tạo AMI tùy chỉnh của riêng bạn. instance_type = \u0026ldquo;t2.micro\u0026rdquo;: Dòng này xác định loại máy chủ sẽ được khởi chạy. Trong trường hợp này, nó là t2.micro. availability_zone = \u0026ldquo;us-east-1a\u0026rdquo;: Dòng này chỉ định Availability Zone (AZ) nơi máy chủ sẽ được khởi chạy. Cấu hình mạng network_interface { \u0026hellip; }: Khối này định nghĩa giao diện mạng cho máy chủ. Terraform dường như đang tham chiếu đến một tài nguyên Network Interface hiện có tên aws_network_interface.web-server-nic\nUser Data:\nuser_data = \u0026laquo;-EOF \u0026hellip; EOF: Định nghĩa một tập lệnh sẽ được thực thi trên máy chủ trong lần khởi động đầu tiên. Tệp lệnh sử dụng #!/bin/bash để thực hiện các hành động sau: sudo apt update -y: Cập nhật danh sách gói cho trình quản lý gói.\nsudo apt install apache2 -y: Cài đặt phần mềm máy chủ web Apache.\nsudo systemctl start apache2: Khởi động dịch vụ máy chủ web Apache.\nsudo bash -c \u0026rsquo;echo your very first web server \u0026gt; /var/www/html/index.html\u0026rsquo;: Tạo một tệp index.html đơn giản với văn bản \u0026ldquo;your very first web server\u0026rdquo; trong thư mục gốc tài liệu của máy chủ web (/var/www/html).\nTag: tags = { Name = \u0026ldquo;web-server\u0026rdquo; }: Dòng này gán một thẻ tên \u0026ldquo;Name\u0026rdquo; với giá trị \u0026ldquo;web-server\u0026rdquo; cho máy chủ. "
},
{
	"uri": "//localhost:1313/vi/4-deloyws/",
	"title": "Deloy Web Server",
	"tags": [],
	"description": "",
	"content": "Deloy Web Server Để chạy dự án, sau khi tải xuống tệp dự án, giải nén nó ở bất kỳ nơi nào bạn muốn. Sau đó, thay thế giá trị \u0026ldquo;Access Key\u0026rdquo; và \u0026ldquo;Secret key\u0026rdquo; của bạn trong khối nhà cung cấp. Tiếp theo, mở tệp bằng Visual Studio Code và nhấn tổ hợp phím Ctrl + Shift + ` để mở Terminal. Nhập lệnh terraform apply và sau đó nhập yes trong terminal để xác nhận việc áp dụng cấu hình. . When the Terminal displays Apply completed and shows the Server_IP, it means Terraform has successfully deployed the infrastructure. Now, simply enter the IP address into any browser, and you should be able to access our Web Server. . . "
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.4-module/",
	"title": "Module",
	"tags": [],
	"description": "",
	"content": "Terraform Module Terraform Module là một tính năng cho phép bạn chia mã Terraform thành các phần nhỏ, dễ quản lý hơn. Nó tương tự như các hàm hoặc các lớp trong lập trình, giúp tái sử dụng code và tổ chức cấu trúc hạ tầng một cách hiệu quả.\nLợi ích của việc sử dụng Terraform Module:\nTái sử dụng mã: Bạn có thể tạo các mô-đun cho các thành phần cơ sở hạ tầng phổ biến, chẳng hạn như máy chủ ảo, mạng hoặc cơ sở dữ liệu, và sử dụng lại chúng trong nhiều dự án khác nhau. Khả năng bảo trì: Chia mã thành các mô-đun nhỏ giúp bạn dễ dàng tìm kiếm, sửa lỗi và cập nhật mã hơn. Tính cộng tác: Bạn có thể chia sẻ các mô-đun với các thành viên khác trong nhóm của mình để cùng nhau phát triển và quản lý cơ sở hạ tầng. *Ví dụ về module Terraform module \u0026#34;aws_ec2_instance\u0026#34; {\rsource = \u0026#34;hashicorp/aws/modules/ec2-instance\u0026#34;\rname = \u0026#34;my-instance\u0026#34;\rami = \u0026#34;ami-01234567890abcdef0\u0026#34;\rinstance_type = \u0026#34;t2.micro\u0026#34;\rcount = 2\r} Mô-đun này có thể được sử dụng trong bất kỳ dự án Terraform nào để tạo ra một máy chủ ảo AWS EC2.\n"
},
{
	"uri": "//localhost:1313/vi/1-introduce/1.5-state/",
	"title": "Terraform State",
	"tags": [],
	"description": "",
	"content": "Terraform State Terraform State là một tập dữ liệu lưu trữ thông tin về các tài nguyên cơ sở hạ tầng mà Terraform đã quản lý. Bao gồm:\nTên và loại mỗi tài nguyên. Thuộc tính mỗi tài nguyên. Mối quan hệ giữa các tài nguyên. Mục đích:\nTheo dõi các thay đổi đối với cơ sở hậ tầng. Xác định các tài nguyên cần được tạo, cập nhật hoặc xóa. Giữ cho cơ sở hạ tầng của bạn nhất quán với cấu hình Terraform. Các loại Terraform State:\nTrạng thái cục bộ: được lưu trữ trong tệp .tfstate trong thư mục dự án Terraform của bạn. Trạng thái xa: được lưu trữ trong kho lưu trữ từ xa, chẳng hạn như HashiCorp Vault. Ví dụ về thông tin của một máy ảo AWS sau khi được tạo:\n{\r\u0026#34;resources\u0026#34;: {\r\u0026#34;aws_instance.web_server\u0026#34;: {\r\u0026#34;type\u0026#34;: \u0026#34;aws_instance\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;web_server\u0026#34;,\r\u0026#34;count\u0026#34;: 1,\r\u0026#34;primary\u0026#34;: {\r\u0026#34;id\u0026#34;: \u0026#34;i-1234567890abcdef0\u0026#34;,\r\u0026#34;attributes\u0026#34;: {\r\u0026#34;ami_id\u0026#34;: \u0026#34;ami-1234567890abcdef0\u0026#34;,\r\u0026#34;instance_type\u0026#34;: \u0026#34;t2.micro\u0026#34;,\r\u0026#34;public_ip\u0026#34;: \u0026#34;123.45.67.89\u0026#34;\r}\r}\r}\r}\r} Có một số công cụ Terraform có thể giúp bạn quản lý trạng thái Terraform, chẳng hạn như Terraform State Viewer và Terraform State Diff.\n"
},
{
	"uri": "//localhost:1313/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Để dọn dẹp tài nguyên ở bảng Terminal của Visual studio code, nhập terraform destroy, tiếp đến nhập yes để xác nhận. Khi terminal thông báo Destroyed completed tức là terraform đã hoàn thành việc dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]